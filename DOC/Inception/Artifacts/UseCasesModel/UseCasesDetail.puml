@startuml UseCasesDetail

rectangle UseCasesDetail {
    package Signup [
    **ID:** UC1
    **Actors:** Visitor
    **Pre-conditions:**  /
    **Main sequence:**
        1. The visitor enters the Authentication section and selects
            the 'Signup' option
        2. The system displays the forms for data entry (email, password)
        3. The visitor enters his own email and password and confirms
        4. The system navigates the visitor to the Home page
    **Alternative sequence:**
      3a.  Invalid fields:
            3a.1) The system displays an error alert with a message of invalid
            fields and returns to step 2
      3b.  Email already existing:
            3b.1) The system displays an error alert with a message of user
            already existing and returns to step 2
    **Post-conditions:** The visitor has registered to the application and is
    automatically authenticated
    ]

    package Login [
    **ID:** UC2
    **Actors:** Visitor
    **Pre-conditions:** The visitor has signed up
    **Main sequence:**
        1. The visitor enters the Authentication section and selects
            the 'Login' option
        2. The system displays the forms for data entry (email, password)
        3. The visitor enters his credentials and confirms
        4. The system navigates the visitor to the Home page
    **Alternative sequence:**
      3a.  Incorrect credentials:
            3a.1) The system displays an error alert with a message of incorrect
            credentials and returns to step 2
    **Post-conditions:** The visitor has authenticated
    ]

    package CardVisualization [
    **ID:** UC3
    **Actors:** Visitor
    **Pre-conditions:** /
    **Main sequence:**
        1. The visitor navigates to the Home page and selects one of the
            available games
        2. The system displays the cards of the selected game with
            their main information
    **Alternative sequence:**  /
    **Post-conditions:** The visitor has visualized the cards
    ]

    package CardDetailsVisualization [
    **ID:** UC4
    **Actors:** Visitor
    **Pre-conditions:**  /
    **Main sequence:**
        1. The visitor selects the "Open Details" option
             from the card in the Home page
        2. The system displays all the information of the selected card
    **Alternative sequence:**  /
    **Post-conditions:** The visitor has visualized the card details
    ]

    package CardsManagement [
    **ID:** UC5
    **Actors:** User
    **Pre-conditions:** The user has logged in
    **Main sequence:**
        1. If the user selects the "Open Details" option of a card in the
            Home page
            1.1) The system displays the selected card with the adding option
            1.2) The user selects a deck and clicks the add button
            1.3) The system displays a modal with the forms for data entry
                   (status, description)
            1.4) The user selects the status, enters the description and
                   confirms
            1.5) The system displays a success alert with a message of card
                   added
        2. If the user enters the Decks section and clicks on the edit mode of
           a card
            2.1) The system makes the card fields editable
            2.2) The user edits the description or the status of the card and
                   confirms
            2.3) The system displays the card with the edited fields
        3. If the user enters the Decks section and clicks on the delete button
            of a card
            3.1) The system requires confirmation
            3.2) The user confirms
            3.3) The system doesn't show the deleted card anymore
    **Alternative sequence:**
    1.2a. The user doesn't select a deck and clicks the add button:
             1.2a.1) The system displays an error alert with a message of
             invalid deck name and returns to step 1.1
    1.4a. The user enters an invalid description:
             1.4a.1) The system displays an error alert with a message of
             invalid description and returns to step 1.3
    3.2a. The user doesn't confirm:
             3.2a.1) The use case returns to step 3
    **Post-conditions:** The card has been managed
    ]

    package OwnedCardsManagement [
    **ID:** UC6
    **Actors:** User
    **Pre-conditions:** The user has logged in
    **Main sequence:**
        1. If the user selects the "Open Details" option of a card in the
            Home page
            1.1) The system displays the selected card with the adding option
            1.2) The user selects the Owned deck and clicks the add button
            1.3) The system displays a modal with the forms for data entry
                   (status, description)
            1.4) The user selects the status, enters the description and
                   confirms
            1.5) The system displays a success alert with a message of card
                   added to Owned deck
        2. If the user enters the Decks section and clicks on the edit mode of
           an Owned card
            2.1) The system makes the card fields editable
            2.2) The user edits the description or the status of the card and
                   confirms
            2.3) The system displays the card with the edited fields
        3. If the user enters the Decks section and clicks on the delete button
            of an Owned card
            3.1) The system requires confirmation
            3.2) The user confirms
            3.3) The system doesn't show the deleted card anymore
    **Alternative sequence:**
    1.2a. The user doesn't select a deck and clicks the add button:
             1.2a.1) The system displays an error alert with a message of
             invalid deck name and returns to step 1.1
    1.4a. The user enters an invalid description:
             1.4a.1) The system displays an error alert with a message of
             invalid description and returns to step 1.3
    3.2a. The user doesn't confirm:
             3.2a.1) The use case returns to step 3
    **Post-conditions:** The card owned by the user has been managed
    ]

    package WishedCardsManagement [
    **ID:** UC7
    **Actors:** User
    **Pre-conditions:** The user has logged in
    **Main sequence:**
        1. If the user selects the "Open Details" option of a card in the
            Home page
            1.1) The system displays the selected card with the adding option
            1.2) The user selects the Wished deck and clicks the add button
            1.3) The system displays a modal with the forms for data entry
                   (status, description)
            1.4) The user selects the status, enters the description and
                   confirms
            1.5) The system displays a success alert with a message of card
                   added to Wished deck
        2. If the user enters the Decks section and clicks on the edit mode of
           a Wished card
            2.1) The system makes the card fields editable
            2.2) The user edits the description or the status of the card and
                   confirms
            2.3) The system displays the card with the edited fields
        3. If the user enters the Decks section and clicks on the delete button
            of a Wished card
            3.1) The system requires confirmation
            3.2) The user confirms
            3.3) The system doesn't show the deleted card anymore
    **Alternative sequence:**
    1.2a. The user doesn't select a deck and clicks the add button:
             1.2a.1) The system displays an error alert with a message of
             invalid deck name and returns to step 1.1
    1.4a. The user enters an invalid description:
             1.4a.1) The system displays an error alert with a message of
             invalid description and returns to step 1.3
    3.2a. The user doesn't confirm:
             3.2a.1) The use case returns to step 3
    **Post-conditions:** The card wished by the user has been managed
    ]

    package DecksManagement [
    **ID:** UC8
    **Actors:** User
    **Pre-conditions:** The user has logged in
    **Main sequence:**
        1. If the user enters the Decks section, inserts a custom deck name
            and confirms
            1.1) The system displays the added custom deck empty
        2. If the user enters the Deck section, selects one or many owned cards
            and clicks on the adding to custom deck button
            2.1) The system displays the cards added to the custom deck
        3. If the user enters the Deck section and clicks on the delete custom
            deck button
            3.1) The system requires confirmation
            3.2) The user confirms
            3.3) The system doesn't show the deleted custom deck anymore
    **Alternative sequence:**
       1a. The user enters an already existing deck name:
             1a.1) The system displays an error alert with a message of
             already existing deck name and returns to step 1
    3.2a. The user doesn't confirm:
             3.2a.1) The use case returns to step 3
    **Post-conditions:** The custom deck has been managed
    ]

    package ProposeExchange [
    **ID:** UC9
    **Actors:** User
    **Pre-conditions:** The user has logged in
    **Main sequence:**
        1. The user navigates to the Home page and selects the "Open Details"
            option of a card
        2. The system displays the card details with the relative lists of
            users which own or wish that card
        3. The user clicks on the "Exchange" button near the user email in
            a list
        4. The system displays the owned deck of each user involved
        5. The user selects the cards that wants to propose to the other user
            and clicks on "Send proposal" button
        6. The system displays a success alert with a message of proposal sent
    **Alternative sequence:**
      5a.  The user click on "Go back" button:
            5a.1) The system navigates to the previous page and returns to
            step 2
    **Post-conditions:** The user has proposed an exchange to another user
    ]

    package ExchangeProposalVisualization [
    **ID:** UC10
    **Actors:** User
    **Pre-conditions:** The user has logged in
        1. The user enters the Exchanges section and clicks on a received
             proposal
        2. The system displays the proposal information
    **Alternative sequence:**  /
    **Post-conditions:** The user has visualized the proposal
    ]

    package RefuseExchange [
    **ID:** UC11
    **Actors:** User
    **Pre-conditions:**  /
    **Main sequence:**
        1. The user clicks on the "Cancel proposal" button
        2. The system displays a success alert with a message of exchange
           proposal removed
    **Alternative sequence:**  /
    **Post-conditions:** The user has refused the exchange and the proposal
    has been deleted
    ]

    package AcceptExchange [
    **ID:** UC12
    **Actors:** User
    **Pre-conditions:**  /
    **Main sequence:**
        1. The user clicks on the "Accept proposal" button
        2. The system displays a success alert with a message of exchange
            proposal accepted
    **Alternative sequence:**  /
    **Post-conditions:** The user has accepted the exchange, the proposal has
    been deleted and the card owners have been switched
    ]

    package Logout [
    **ID:** UC13
    **Actors:** User
    **Pre-conditions:** The user has logged in
    **Main sequence:**
        1. The user logs out of the application through the apposite button
    **Alternative sequence:**  /
    **Post-conditions:** The user is no longer authenticated
    ]
}

@enduml